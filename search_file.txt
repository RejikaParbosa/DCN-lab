//3. Write a TCP Client-Server program where the client requests the size of a specified file 
from the server. The server checks whether the file is available and, if found, sends the file 
size (in bytes) to the client. If the file is not available, the server returns the message: "File 
not found on the server."

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void handle_client(int client_socket) {
    char filename[BUFFER_SIZE];
    long file_size;

    
    if (read(client_socket, filename, BUFFER_SIZE) < 0) {
        perror("Read failed");
        return;
    }

    
    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        
        const char *error_msg = "File not found on the server.";
        write(client_socket, error_msg, strlen(error_msg) + 1);
        printf("File '%s' not found.\n", filename);
    } else {
        
        fseek(file, 0, SEEK_END);
        file_size = ftell(file);
        fclose(file);

        
        write(client_socket, &file_size, sizeof(file_size));
        printf("File '%s' size: %ld bytes sent to client.\n", filename, file_size);
    }
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    while (1) {
        
        if ((new_socket = accept(server_fd, (struct sockaddr )&address, (socklen_t)&addrlen)) < 0) {
            perror("Accept failed");
            close(server_fd);
            exit(EXIT_FAILURE);
        }

        
        handle_client(new_socket);

        
        close(new_socket);
    }

    close(server_fd);
    return 0;
}

//client

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char filename[BUFFER_SIZE];
    char buffer[BUFFER_SIZE];

    
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    
    printf("Enter filename: ");
    scanf("%s", filename);

    
    write(sock, filename, strlen(filename) + 1);

    
    if (read(sock, buffer, BUFFER_SIZE) < 0) {
        printf("Read failed\n");
        close(sock);
        return -1;
    }

    
    if (strcmp(buffer, "File not found on the server.") == 0) {
        printf("%s\n", buffer);
    } else {
        long file_size;
        memcpy(&file_size, buffer, sizeof(file_size));
        printf("File size: %ld bytes\n", file_size);
    }

    close(sock);
    return 0;
}